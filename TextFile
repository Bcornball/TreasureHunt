great alright now, i have some deep java code, that would be great to produce. 
So as a code i'd love to have a small game that has option to get a treasure. 
give these attributes a fighter he has knowledge 
15 will 15 strength 15 agility 15 resourcefulness 15 Health 100 Damage 25 Movespeed 300 the objective is to get some treasure and enjoy. 
have a simple 4 choice option that they type to go a small adventure game about 30 moves long




import java.util.Scanner;

public class TreasureHunter {

    // Fighter attributes
    private static int knowledge = 15;
    private static int will = 15;
    private static int strength = 15;
    private static int agility = 15;
    private static int resourcefulness = 15;
    private static int health = 100;
    private static int damage = 25;
    private static int moveSpeed = 300;
    
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Welcome to Treasure Hunter game!");
        System.out.println("Your objective is to find the treasure and enjoy the rewards.");
        System.out.println("You have 30 moves to complete your mission.");

        int movesLeft = 30; // Total number of moves allowed
        boolean treasureFound = false; // Whether the treasure has been found or not

        while (movesLeft > 0 && !treasureFound) {
            System.out.println("\nYou have " + movesLeft + " moves left.");

            // Display available options
            System.out.println("What do you want to do?");
            System.out.println("1. Search for treasure");
            System.out.println("2. Rest and recover health");
            System.out.println("3. Train to improve your attributes");
            System.out.println("4. Quit the game");

            // Get user's choice
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Search for treasure
                    System.out.println("You start searching for treasure...");
                    int chance = (int) (Math.random() * 100); // Random chance of finding treasure
                    if (chance >= 50) {
                        System.out.println("Congratulations! You found the treasure!");
                        System.out.println("You win the game!");
                        treasureFound = true;
                    } else {
                        System.out.println("You couldn't find any treasure...");
                    }
                    movesLeft--;
                    break;
                case 2:
                    // Rest and recover health
                    System.out.println("You rest and recover some health...");
                    health += 10;
                    if (health > 100) {
                        health = 100;
                    }
                    movesLeft--;
                    break;
                case 3:
                    // Train to improve attributes
                    System.out.println("You train to improve your attributes...");
                    System.out.println("Which attribute do you want to improve?");
                    System.out.println("1. Knowledge");
                    System.out.println("2. Will");
                    System.out.println("3. Strength");
                    System.out.println("4. Agility");
                    System.out.println("5. Resourcefulness");

                    // Get user's choice
                    int attribute = scanner.nextInt();

                    switch (attribute) {
                        case 1:
                            knowledge++;
                            System.out.println("Your knowledge is now " + knowledge);
                            break;
                        case 2:
                            will++;
                            System.out.println("Your will is now " + will);
                            break;
                        case 3:
                            strength++;
                            System.out.println("Your strength is now " + strength);
                            break;
                        case 4:
                            agility++;
                            System.out.println("Your agility is now " + agility);
                            break;
                        case 5:
                            resourcefulness++;
                            System.out.println("Your resourcefulness is now " + resourcefulness);
                            break;
                        default:
                            System.out.println("Invalid choice!");
                            break;
                    }
                    movesLeft--;
                    break;
                case 4:
                    // Quit the game
                    System.out.println("You quit the game.");
                    movesLeft = 0;
                    break;
                default:
                    System.out.println("Invalid choice!");
                    break;
            }
        }

        if (!treasureFound) {
            System.out.println("\nYou ran out of moves!");
            System.out.println("Game over!");
        }
    }
}



===============================================================================================================================================================================================================================================
==============================================================================================================================================================================================================================================
instance 2

import java.util.Scanner;

public class TreasureHunter {

    // Fighter attributes
    private static int knowledge = 15;
    private static int will = 15;
    private static int strength = 15;
    private static int agility = 15;
    private static int resourcefulness = 15;
    private static int health = 100;
    private static int damage = 25;
    private static int moveSpeed = 300;
    private static int fightSpeed = 20; // Base fight speed for the fighter
    private static int weaponDamage = 30; // Base weapon damage for the fighter
    private static int magicResist = 15; // Base magic resist for the fighter
    private static int magicDamage = 5; // Base magic damage for the fighter
    private static int openSpeed = 20; // Base open speed for the fighter
    private static int swapSpeed = 10; // Base swap speed for the fighter
    
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Welcome to Treasure Hunter game!");
        System.out.println("Your objective is to find the treasure and enjoy the rewards.");
        System.out.println("You have 30 moves to complete your mission.");

        int movesLeft = 30; // Total number of moves allowed
        boolean treasureFound = false; // Whether the treasure has been found or not

        while (movesLeft > 0 && !treasureFound) {
            System.out.println("\nYou have " + movesLeft + " moves left.");

            // Display available options
            System.out.println("What do you want to do?");
            System.out.println("1. Search for treasure");
            System.out.println("2. Rest and recover health");
            System.out.println("3. Train to improve your attributes");
            System.out.println("4. Quit the game");

            // Get user's choice
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Search for treasure
                    System.out.println("You start searching for treasure...");
                    int chance = (int) (Math.random() * 100); // Random chance of finding treasure
                    if (chance >= 50) {
                        System.out.println("Congratulations! You found the treasure!");
                        System.out.println("You win the game!");
                        treasureFound = true;
                    } else {
                        System.out.println("You couldn't find any treasure...");
                    }
                    movesLeft--;
                    break;
                case 2:
                    // Rest and recover health
                    System.out.println("You rest and recover some health...");
                    health += 10;
                    if (health > 100) {
                        health = 100;
                    }
                    movesLeft--;
                    break;
                case 3:
                    // Train to improve attributes
                    System.out.println("You train to improve your attributes...");
                    System.out.println("Which attribute do you want to improve?");
                    System.out.println("1. Knowledge");
                    System.out.println("2. Will");
                    System.out.println("3. Strength");
                    System.out.println("4. Agility");
                    System.out.println("5. Resourcefulness");

                    // Get user's choice
                    int attribute = scanner.nextInt();

                    switch (attribute) {
                        case 1:
                            knowledge++;
                            System.out.println("Your knowledge is now " + knowledge);
                            break;
                        case 2:
                            will++;
                            System.out.println("Your will is now " + will);
                            break;
                        case 3:
                            strength++;
                            health += 3; // Increase health by 3
                            weaponDamage++; // Increase weapon damage by 1
                            System.out.println("Your strength is now " + strength);
                            break;
                        case 4:
                            agility++;
                            moveSpeed += 3; // Increase move speed by 3
                            fightSpeed++; // Increase fight speed by 1
                            System.out.println("Your agility is now " + agility);
                            break;
                        case 5:
                            resourcefulness++;
                            openSpeed++; // Increase open speed by 1
                            if (swapSpeed < 20) {
                                swapSpeed++; // Increase swap speed by 1 until it reaches 20
                            }
                            System.out.println("Your resourcefulness is now " + resourcefulness);
                            break;
                        default:
                            System.out.println("Invalid choice!");
                            break;
                    }
                    movesLeft--;
                    break;
                case 4:
                    // Quit the game
                    System.out.println("You quit the game.");
                    movesLeft = 0;
                    break;
                default:
                    System.out.println("Invalid choice!");
                    break;
            }
        }

        if (!treasureFound) {
            System.out.println("\nYou ran out of moves!");
            System.out.println("Game over!");
        }
    }
}
===============================================================================================================================================================================================================================================
==============================================================================================================================================================================================================================================
Instance 3


okay now in this at the choice list add a way in which a adventuer can go into the dungeon and then give him choices to go through a door or through a hole or go left door or right door. 
also give a peek option to look into the doors. 
these doors will have a skeleton and a zombie sometimes. 
there are chest in there give them an option to look when they are there. 
they can sell these treasures after leaving this place to get gear. give a gear rating in the base game

Chatgpt Version of text
This is a Java program called Treasure Hunter. It is a text-based adventure game where the player is tasked with finding a treasure within 30 moves. The player can search for treasure, rest and recover health, train to improve their attributes, enter the dungeon, and quit the game. Within the dungeon, the player can choose different paths and encounter challenges such as enemies, traps, puzzles, and a boss. 
The player can attack with weapons, cast magic spells, use items, and attempt to flee from the boss. The game ends when the player runs out of moves or finds the treasure.

import java.util.Scanner;

public class TreasureHunter {

    // Fighter attributes
    private static int knowledge = 15;
    private static int will = 15;
    private static int strength = 15;
    private static int agility = 15;
    private static int resourcefulness = 15;
    private static int health = 100;
    private static int damage = 25;
    private static int moveSpeed = 300;
    private static int fightSpeed = 20; // Base fight speed for the fighter
    private static int weaponDamage = 30; // Base weapon damage for the fighter
    private static int magicResist = 15; // Base magic resist for the fighter
    private static int magicDamage = 5; // Base magic damage for the fighter
    private static int openSpeed = 20; // Base open speed for the fighter
    private static int swapSpeed = 10; // Base swap speed for the fighter
    
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Welcome to Treasure Hunter game!");
        System.out.println("Your objective is to find the treasure and enjoy the rewards.");
        System.out.println("You have 30 moves to complete your mission.");

        int movesLeft = 30; // Total number of moves allowed
        boolean treasureFound = false; // Whether the treasure has been found or not
        boolean inDungeon = false; // Whether the player is in the dungeon or not
        int gearRating = 0; // Initial gear rating

        while (movesLeft > 0 && !treasureFound) {
            System.out.println("\nYou have " + movesLeft + " moves left.");

            // Display available options
            System.out.println("What do you want to do?");
            System.out.println("1. Search for treasure");
            System.out.println("2. Rest and recover health");
            System.out.println("3. Train to improve your attributes");
            System.out.println("4. Enter the dungeon");
            System.out.println("5. Quit the game");

            // Get user's choice
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Search for treasure
                    System.out.println("You start searching for treasure...");
                    int chance = (int) (Math.random() * 100); // Random chance of finding treasure
                    if (chance >= 50) {
                        int treasureValue = (int) (Math.random() * 100); // Random value of the treasure found
                        System.out.println("Congratulations! You found a treasure worth " + treasureValue + " gold!");
                        gearRating += treasureValue; // Increase gear rating by the value of the treasure found
                    } else {
                        System.out.println("You couldn't find any treasure...");
                    }
                    movesLeft--;
                    break;
                case 2:
                    // Rest and recover health
                    System.out.println("You rest and recover some health...");
                    health += 10;
                    if (health > 100) {
                        health = 100;
                    }
                    movesLeft--;
                    break;
                case 3:
                    // Train to improve attributes
                    System.out.println("You train to improve your attributes...");
                    System.out.println("Which attribute do you want to improve?");
                    System.out.println("1. Knowledge");
                    System.out.println("2. Will");
                    System.out.println("3. Strength");
                    System.out.println("4. Agility");
                    System.out.println("5. Resourcefulness");

                    // Get user's choice
                    int attribute = scanner.nextInt();

                    switch (attribute) {
                        case 1:
                            knowledge++;
                            System.out.println("Your knowledge is now " + knowledge);
                            break;
                        case 2:
                            will++;
                            System.out.println("Your will is now " + will);
                            break;
                        case 3:
                            strength++;
                            health += 3; // Increase health by 3
                            weaponDamage++; // Increase weapon damage by 1
                            System.out.println("Your strength is now " + strength);
                            break;
                        case 4:
                            agility++;
                            moveSpeed += 3; // Increase move speed by 3
                            fightSpeed++; // Increase fight speed by 1
                            System.out.println("Your agility is now " + agility);
                            break;
                        case 5:
                            resourcefulness++;
                            openSpeed++; // Increase open speed by 1
                            if (swapSpeed < 20) {
                                swapSpeed++; // Increase swap speed by 1 until it reaches 20
                            }
                            System.out.println("Your resourcefulness is now " + resourcefulness);
                            break;
                        default:
                            System.out.println("Invalid choice!");
                            break;
                    }
                    movesLeft--;
                    break;
                case 4:
                    // Enter the dungeon
                    if (!inDungeon) {
                        System.out.println("You enter the dungeon...");
                        inDungeon = true;
                    } else {
                        System.out.println("You are already in the dungeon!");
                    }
                    break;
                case 5:
                    // Quit the game
                    System.out.println("You quit the game.");
                    movesLeft = 0;
                    break;
                default:
                    System.out.println("Invalid choice!");
                    break;
            }

            // If the player is in the dungeon
            if (inDungeon) {
                System.out.println("\nYou are in the dungeon.");

                // Display available options
                System.out.println("What do you want to do?");
                System.out.println("1. Go through the door");
                System.out.println("2. Go through the hole");
                System.out.println("3. Go through the left door");
                System.out.println("4. Go through the right door");
                System.out.println("5. Peek into the doors");
                System.out.println("6. Leave the dungeon");

                // Get user's choice
                int dungeonChoice = scanner.nextInt();

                switch (dungeonChoice) {
                    case 1:
                        System.out.println("You go through the door...");
                        int enemy = (int) (Math.random() * 2); // Random enemy: 0 = Skeleton, 1 = Zombie
                        if (enemy == 0) {
                            System.out.println("You encounter a Skeleton!");
                        } else {
                            System.out.println("You encounter a Zombie!");
                        }
                        if (Math.random() < 0.5) {
                            int treasureValue = (int) (Math.random() * 100); // Random value of the treasure found
                            System.out.println("You found a chest worth " + treasureValue + " gold!");
                            gearRating += treasureValue; // Increase gear rating by the value of the treasure found
                        }
                        movesLeft--;
                        break;
                    case 2:
                        System.out.println("You go through the hole...");
                        int trap = (int) (Math.random() * 2); // Random trap: 0 = Poison gas, 1 = Spike pit
                        if (trap == 0) {
                            System.out.println("You triggered a Poison gas trap!");
                            health -= 20; // Decrease health by 20
                        } else {
                            System.out.println("You fell into a Spike pit trap!");
                            health -= 30; // Decrease health by 30
                        }
                        movesLeft--;
                        break;
                    case 3:
                        System.out.println("You go through the left door...");
                        int challenge = (int) (Math.random() * 3); // Random challenge: 0 = Riddle, 1 = Puzzle, 2 = Maze
                        if (challenge == 0) {
                            System.out.println("You encounter a Riddle challenge!");
                            int answer = (int) (Math.random() * 10); // Random riddle answer
                            System.out.println("What is the answer to this riddle: 'I am not alive, but I grow; I don't have lungs, but I need air; I don't have a mouth, but water kills me. What am I?'");
                            int guess = scanner.nextInt();
                            if (guess == answer) {
                                System.out.println("Congratulations! You solved the riddle and found a treasure worth 50 gold!");
                                gearRating += 50; // Increase gear rating by 50
                            } else {
                                System.out.println("Sorry, the correct answer is " + answer + ".");
                            }
                        } else if (challenge == 1) {
                            System.out.println("You encounter a Puzzle challenge!");
                            int solution = (int) (Math.random() * 1000); // Random puzzle solution
                            System.out.println("What is the missing number in this sequence: 1, 2, 4, 7, 11, __ ?");
                            int guess = scanner.nextInt();
                            if (guess == solution) {
                                System.out.println("Congratulations! You solved the puzzle and found a treasure worth 75 gold!");
                                gearRating += 75; // Increase gear rating by 75
                            } else {
                                System.out.println("Sorry, the correct answer is " + solution + ".");
                            }
                        } else {
                            System.out.println("You encounter a Maze challenge!");
                            System.out.println("You have to find your way out of the maze before the time runs out.");
                            int mazeTime = 30; // Time allowed to complete the maze
                            while (mazeTime > 0) {
                                System.out.println("You have " + mazeTime + " seconds left.");
                                System.out.println("Which direction do you want to go?");
                                System.out.println("1. North");
                                System.out.println("2. East");
                                System.out.println("3. South");
                                System.out.println("4. West");

                                int direction = scanner.nextInt();

                                switch (direction) {
                                    case 1:
                                        System.out.println("You go North...");
                                        break;
                                    case 2:
                                        System.out.println("You go East...");
                                        break;
                                    case 3:
                                        System.out.println("You go South...");
                                        break;
                                    case 4:
                                        System.out.println("You go West...");
                                        break;
                                    default:
                                        System.out.println("Invalid direction!");
                                        break;
                                }

                                // Check if the player has reached the exit
                                if (Math.random() < 0.3) {
                                    System.out.println("You found the exit and earned a treasure worth 100 gold!");
                                    gearRating += 100; // Increase gear rating by 100
                                    break;
                                }

                                mazeTime--;
                            }
                            if (mazeTime == 0) {
                                System.out.println("Sorry, you ran out of time and failed the challenge.");
                            }
                        }
                        movesLeft--;
                        break;
                    case 4:
                        System.out.println("You go through the right door...");
                        int boss = (int) (Math.random() * 2); // Random boss: 0 = Dragon, 1 = Demon
                        System.out.println("You encounter the boss: ");
                        if (boss == 0) {
                            System.out.println("Dragon!");
                        } else {
                            System.out.println("Demon!");
                        }
                        int bossHealth = 100; // Initial boss health
                        while (health > 0 && bossHealth > 0) {
                            System.out.println("What do you want to do?");
                            System.out.println("1. Attack with weapon");
                            System.out.println("2. Cast magic spell");
                            System.out.println("3. Use item");
                            System.out.println("4. Attempt to flee");

                            int action = scanner.nextInt();

                            switch (action) {
                                case 1:
                                    // Attack with weapon
                                    int hitChance = (int) (Math.random() * 100); // Random hit chance
                                    if (hitChance >= 50) {
                                        int damageDealt = damage + weaponDamage - bossHealth; // Calculate damage dealt to the boss
                                        System.out.println("You hit the boss and dealt " + damageDealt + " damage!");
                                        bossHealth -= damageDealt; // Decrease boss health by the damage dealt
                                    } else {
                                        System.out.println("You missed the boss!");
                                    }
                                    break;
                                case 2:
                                    // Cast magic spell
                                    int magicChance = (int) (Math.random() * 100); // Random magic chance
                                    if (magicChance >= 50) {
                                        int damageDealt = magicDamage - bossHealth; // Calculate damage dealt to the boss
                                        System.out.println("You cast a magic spell and dealt " + damageDealt + " damage!");
                                        bossHealth -= damageDealt; // Decrease boss health by the damage dealt
                                    } else {
                                        System.out.println("Your magic spell failed!");
                                    }
                                    break;
                                case 3:
                                    // Use item
                                    System.out.println("You don't have any items!");
                                    break;
                                case 4:
                                    // Attempt to flee
                                    int fleeChance = (int) (Math.random() * 100); // Random flee chance
                                    if (fleeChance >= 50) {
                                        System.out.println("You successfully fled from the boss!");
                                        inDungeon = false; // Player leaves the dungeon
                                    } else {
                                        System.out.println("You failed to flee from the boss!");
                                    }
                                    break;
                                default:
                                    System.out.println("Invalid action!");
                                    break;
                            }

                            if (bossHealth > 0) {
                                // Boss attacks
                                int bossHitChance = (int) (Math.random() * 100); // Random hit chance for the boss
                                if (bossHitChance >= 50) {
                                    int bossDamageDealt = (int) (Math.random() * 30); // Random damage dealt by the boss
                                    System.out.println("The boss hit you and dealt " + bossDamageDealt + " damage!");
                                    health -= bossDamageDealt; // Decrease player health by the damage dealt
                                } else {
                                    System.out.println("The boss missed you!");
                                }
                            }
                        }

                        if (health <= 0) {
                            System.out.println("You have been defeated by the boss...");
                            movesLeft = 0; // Player loses the game
                        } else {
                            System.out.println("Congratulations! You have defeated the boss and found the treasure!");
                            int treasureValue = (int) (Math.random() * 500); // Random value of the treasure found
                            System.out.println("The treasure is worth " + treasureValue + " gold!");
                            gearRating += treasureValue; // Increase gear rating by the value of the treasure found
                            treasureFound = true; // Player wins the game
                        }
                        break;
                    case 5:
                        System.out.println("You peek into the doors...");
                        int peekChance = (int) (Math.random() * 100); // Random chance of finding something
                        if (peekChance >= 50) {
                            int peekValue = (int) (Math.random() * 50); // Random value of what is found
                            System.out.println("You found something worth " + peekValue + " gold!");
                            gearRating += peekValue; // Increase gear rating by the value of what is found
                        } else {
                            System.out.println("You couldn't find anything...");
                        }
                        movesLeft--;
                        break;
                    case 6:
                        System.out.println("You leave the dungeon...");
                        inDungeon = false; // Player leaves the dungeon
                        break;
                    default:
                        System.out.println("Invalid choice!");
                        break;
                }
            }
        }

        if (movesLeft == 0 && !treasureFound) {
            System.out.println("Sorry, you have run out of moves and failed to find the treasure...");
        } else {
            System.out.println("Your gear rating is " + gearRating);
            System.out.println("Congratulations! You have completed the game!");
        }

        scanner.close();
    }
}

===============================================================================================================================================================================================================================================
=============================================================================================================================================================================================================================================

Instance 4
Keep the flow of D'a'd

Add another character a ranger
his base stats are
A = agility = 17
K = knowledge = 14
Strength = S = 12
W = 11 = Will
Resourcefullness = R = 18

change the variables to letters to make it easier


Allow the characters to have gear
so the fighter can have a chest piece
a helmet and gloves
the ranger can have
gloves boots and helmet

give the ranger better boots that have base better speed stats



Bit of work



To make the code cleaner, you can create a separate class for the Fighter and Ranger attributes and use getter methods to access the attributes. Here is an example:

public class Fighter {
    private int agility;
    private int knowledge;
    private int strength;
    private int will;
    private int resourcefulness;
    private int health;
    private int damage;
    private int moveSpeed;
    private int fightSpeed;
    private int weaponDamage;
    private int magicResist;
    private int magicDamage;
    private int openSpeed;
    private int swapSpeed;
    private String chestPiece;
    private String helmet;
    private String gloves;

    public Fighter(int agility, int knowledge, int strength, int will, int resourcefulness, int health, int damage, int moveSpeed, int fightSpeed, int weaponDamage, int magicResist, int magicDamage, int openSpeed, int swapSpeed, String chestPiece, String helmet, String gloves) {
        this.agility = agility;
        this.knowledge = knowledge;
        this.strength = strength;
        this.will = will;
        this.resourcefulness = resourcefulness;
        this.health = health;
        this.damage = damage;
        this.moveSpeed = moveSpeed;
        this.fightSpeed = fightSpeed;
        this.weaponDamage = weaponDamage;
        this.magicResist = magicResist;
        this.magicDamage = magicDamage;
        this.openSpeed = openSpeed;
        this.swapSpeed = swapSpeed;
        this.chestPiece = chestPiece;
        this.helmet = helmet;
        this.gloves = gloves;
    }

    public int getAgility() {
        return agility;
    }

    public int getKnowledge() {
        return knowledge;
    }

    public int getStrength() {
        return strength;
    }

    public int getWill() {
        return will;
    }

    public int getResourcefulness() {
        return resourcefulness;
    }

    public int getHealth() {
        return health;
    }

    public int getDamage() {
        return damage;
    }

    public int getMoveSpeed() {
        return moveSpeed;
    }

    public int getFightSpeed() {
        return fightSpeed;
    }

    public int getWeaponDamage() {
        return weaponDamage;
    }

    public int getMagicResist() {
        return magicResist;
    }

    public int getMagicDamage() {
        return magicDamage;
    }

    public int getOpenSpeed() {
        return openSpeed;
    }

    public int getSwapSpeed() {
        return swapSpeed;
    }

    public String getChestPiece() {
        return chestPiece;
    }

    public String getHelmet() {
        return helmet;
    }

    public String getGloves() {
        return gloves;
    }
}

You can create a similar class for Ranger:

public class Ranger {
    private int agility;
    private int knowledge;
    private int strength;
    private int will;
    private int resourcefulness;
    private int health;
    private int damage;
    private int moveSpeed;
    private int fightSpeed;
    private int weaponDamage;
    private int magicResist;
    private int magicDamage;
    private int openSpeed;
    private int swapSpeed;
    private String chestPiece;
    private String helmet;
    private String gloves;
    private String boots;

    public Ranger(int agility, int knowledge, int strength, int will, int resourcefulness, int health, int damage, int moveSpeed, int fightSpeed, int weaponDamage, int magicResist, int magicDamage, int openSpeed, int swapSpeed, String chestPiece, String helmet, String gloves, String boots) {
        this.agility = agility;
        this.knowledge = knowledge;
        this.strength = strength;
        this.will = will;
        this.resourcefulness = resourcefulness;
        this.health = health;
        this.damage = damage;
        this.moveSpeed = moveSpeed;
        this.fightSpeed = fightSpeed;
        this.weaponDamage = weaponDamage;
        this.magicResist = magicResist;
        this.magicDamage = magicDamage;
        this.openSpeed = openSpeed;
        this.swapSpeed = swapSpeed;
        this.chestPiece = chestPiece;
        this.helmet = helmet;
        this.gloves = gloves;
        this.boots = boots;
    }

    public int getAgility() {
        return agility;
    }

    public int getKnowledge() {
        return knowledge;
    }

    public int getStrength() {
        return strength;
    }

    public int getWill() {
        return will;
    }

    public int getResourcefulness() {
        return resourcefulness;
    }

    public int getHealth() {
        return health;
    }

    public int getDamage() {
        return damage;
    }

    public int getMoveSpeed() {
        return moveSpeed;
    }

    public int getFightSpeed() {
        return fightSpeed;
    }

    public int getWeaponDamage() {
        return weaponDamage;
    }

    public int getMagicResist() {
        return magicResist;
    }

    public int getMagicDamage() {
        return magicDamage;
    }

    public int getOpenSpeed() {
        return openSpeed;
    }

    public int getSwapSpeed() {
        return swapSpeed;
    }

    public String getChestPiece() {
        return chestPiece;
    }

    public String getHelmet() {
        return helmet;
    }

    public String getGloves() {
        return gloves;
    }

    public String getBoots() {
        return boots;
    }
}

Then, in your main class, you can create instances of Fighter and Ranger and use the getter methods to access their attributes:

Fighter fighter = new Fighter(15, 15, 15, 15, 15, 100, 25, 300, 20, 30, 15, 5, 20, 10, "", "", "");
Ranger ranger = new Ranger(17, 14, 12, 11, 18, 100, 25, 350, 20, 25, 15, 5, 20, 10, "", "", "", "Better Boots");

int fighterAgility = fighter.getAgility();
int rangerAgility = ranger.getAgility();

System.out.println("Fighter agility: " + fighterAgility);
System.out.println("Ranger agility: " + rangerAgility);



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



public class TreasureHunter {

 // Create a Fighter instance
Fighter fighter = new Fighter(15, 15, 15, 15, 15, 100, 25, 300, 20, 30, 15, 5, 20, 10, "", "", "");

// Create a Ranger instance
Ranger ranger = new Ranger(17, 14, 12, 11, 18, 100, 25, 350, 20, 25, 15, 5, 20, 10, "", "", "", "Better Boots");



public int getKnowledge() {
    return knowledge;
}

public int getWill() {
    return will;
}

public int getStrength() {
    return strength;
}

public int getAgility() {
    return agility;
}

public int getResourcefulness() {
    return resourcefulness;
}

public int getHealth() {
    return health;
}

public int getDamage() {
    return damage;
}

public int getMoveSpeed() {
    return moveSpeed;
}

public int getFightSpeed() {
    return fightSpeed;
}

public int getWeaponDamage() {
    return weaponDamage;
}

public int getMagicResist() {
    return magicResist;
}

public int getMagicDamage() {
    return magicDamage;
}

public int getOpenSpeed() {
    return openSpeed;
}

public int getSwapSpeed() {
    return swapSpeed;
}

//And here are the remaining getter methods for the Ranger class:

public int getKnowledge() {
    return knowledge;
}

public int getWill() {
    return will;
}

public int getStrength() {
    return strength;
}

public int getAgility() {
    return agility;
}

public int getResourcefulness() {
    return resourcefulness;
}

public int getHealth() {
    return health;
}

public int getDamage() {
    return damage;
}

public int getMoveSpeed() {
    return moveSpeed;
}

public int getFightSpeed() {
    return fightSpeed;
}

public int getWeaponDamage() {
    return weaponDamage;
}

public int getMagicResist() {
    return magicResist;
}

public int getMagicDamage() {
    return magicDamage;
}

public int getOpenSpeed() {
    return openSpeed;
}

public int getSwapSpeed() {
    return swapSpeed;
}

public String getChestPiece() {
    return chestPiece;
}

public String getHelmet() {
    return helmet;
}

public String getGloves() {
    return gloves;
}

public String getBoots() {
    return boots;
}
    
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Welcome to Treasure Hunter game!");
        System.out.println("Your objective is to find the treasure and enjoy the rewards.");
        System.out.println("You have 30 moves to complete your mission.");

        int movesLeft = 30; // Total number of moves allowed
        boolean treasureFound = false; // Whether the treasure has been found or not
        boolean inDungeon = false; // Whether the player is in the dungeon or not
        int gearRating = 0; // Initial gear rating

        while (movesLeft > 0 && !treasureFound) {
            System.out.println("\nYou have " + movesLeft + " moves left.");

            // Display available options
            System.out.println("What do you want to do?");
            System.out.println("1. Search for treasure");
            System.out.println("2. Rest and recover health");
            System.out.println("3. Train to improve your attributes");
            System.out.println("4. Enter the dungeon");
            System.out.println("5. Quit the game");

            // Get user's choice
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Search for treasure
                    System.out.println("You start searching for treasure...");
                    int chance = (int) (Math.random() * 100); // Random chance of finding treasure
                    if (chance >= 50) {
                        int treasureValue = (int) (Math.random() * 100); // Random value of the treasure found
                        System.out.println("Congratulations! You found a treasure worth " + treasureValue + " gold!");
                        gearRating += treasureValue; // Increase gear rating by the value of the treasure found
                    } else {
                        System.out.println("You couldn't find any treasure...");
                    }
                    movesLeft--;
                    break;
                case 2:
                    // Rest and recover health
                    System.out.println("You rest and recover some health...");
                    health += 10;
                    if (health > 100) {
                        health = 100;
                    }
                    movesLeft--;
                    break;
                case 3:
                    // Train to improve attributes
                    System.out.println("You train to improve your attributes...");
                    System.out.println("Which attribute do you want to improve?");
                    System.out.println("1. Knowledge");
                    System.out.println("2. Will");
                    System.out.println("3. Strength");
                    System.out.println("4. Agility");
                    System.out.println("5. Resourcefulness");

                    // Get user's choice
                    int attribute = scanner.nextInt();

                    switch (attribute) {
                        case 1:
                            knowledge++;
                            System.out.println("Your knowledge is now " + knowledge);
                            break;
                        case 2:
                            will++;
                            System.out.println("Your will is now " + will);
                            break;
                        case 3:
                            strength++;
                            health += 3; // Increase health by 3
                            weaponDamage++; // Increase weapon damage by 1
                            System.out.println("Your strength is now " + strength);
                            break;
                        case 4:
                            agility++;
                            moveSpeed += 3; // Increase move speed by 3
                            fightSpeed++; // Increase fight speed by 1
                            System.out.println("Your agility is now " + agility);
                            break;
                        case 5:
                            resourcefulness++;
                            openSpeed++; // Increase open speed by 1
                            if (swapSpeed < 20) {
                                swapSpeed++; // Increase swap speed by 1 until it reaches 20
                            }
                            System.out.println("Your resourcefulness is now " + resourcefulness);
                            break;
                        default:
                            System.out.println("Invalid choice!");
                            break;
                    }
                    movesLeft--;
                    break;
                case 4:
                    // Enter the dungeon
                    if (!inDungeon) {
                        System.out.println("You enter the dungeon...");
                        inDungeon = true;
                    } else {
                        System.out.println("You are already in the dungeon!");
                    }
                    break;
                case 5:
                    // Quit the game
                    System.out.println("You quit the game.");
                    movesLeft = 0;
                    break;
                default:
                    System.out.println("Invalid choice!");
                    break;
            }

            // If the player is in the dungeon
            if (inDungeon) {
                System.out.println("\nYou are in the dungeon.");

                // Display available options
                System.out.println("What do you want to do?");
                System.out.println("1. Go through the door");
                System.out.println("2. Go through the hole");
                System.out.println("3. Go through the left door");
                System.out.println("4. Go through the right door");
                System.out.println("5. Peek into the doors");
                System.out.println("6. Leave the dungeon");

                // Get user's choice
                int dungeonChoice = scanner.nextInt();

                switch (dungeonChoice) {
                    case 1:
                        System.out.println("You go through the door...");
                        int enemy = (int) (Math.random() * 2); // Random enemy: 0 = Skeleton, 1 = Zombie
                        if (enemy == 0) {
                            System.out.println("You encounter a Skeleton!");
                        } else {
                            System.out.println("You encounter a Zombie!");
                        }
                        if (Math.random() < 0.5) {
                            int treasureValue = (int) (Math.random() * 100); // Random value of the treasure found
                            System.out.println("You found a chest worth " + treasureValue + " gold!");
                            gearRating += treasureValue; // Increase gear rating by the value of the treasure found
                        }
                        movesLeft--;
                        break;
                    case 2:
                        System.out.println("You go through the hole...");
                        int trap = (int) (Math.random() * 2); // Random trap: 0 = Poison gas, 1 = Spike pit
                        if (trap == 0) {
                            System.out.println("You triggered a Poison gas trap!");
                            health -= 20; // Decrease health by 20
                        } else {
                            System.out.println("You fell into a Spike pit trap!");
                            health -= 30; // Decrease health by 30
                        }
                        movesLeft--;
                        break;
                    case 3:
                        System.out.println("You go through the left door...");
                        int challenge = (int) (Math.random() * 3); // Random challenge: 0 = Riddle, 1 = Puzzle, 2 = Maze
                        if (challenge == 0) {
                            System.out.println("You encounter a Riddle challenge!");
                            int answer = (int) (Math.random() * 10); // Random riddle answer
                            System.out.println("What is the answer to this riddle: 'I am not alive, but I grow; I don't have lungs, but I need air; I don't have a mouth, but water kills me. What am I?'");
                            int guess = scanner.nextInt();
                            if (guess == answer) {
                                System.out.println("Congratulations! You solved the riddle and found a treasure worth 50 gold!");
                                gearRating += 50; // Increase gear rating by 50
                            } else {
                                System.out.println("Sorry, the correct answer is " + answer + ".");
                            }
                        } else if (challenge == 1) {
                            System.out.println("You encounter a Puzzle challenge!");
                            int solution = (int) (Math.random() * 1000); // Random puzzle solution
                            System.out.println("What is the missing number in this sequence: 1, 2, 4, 7, 11, __ ?");
                            int guess = scanner.nextInt();
                            if (guess == solution) {
                                System.out.println("Congratulations! You solved the puzzle and found a treasure worth 75 gold!");
                                gearRating += 75; // Increase gear rating by 75
                            } else {
                                System.out.println("Sorry, the correct answer is " + solution + ".");
                            }
                        } else {
                            System.out.println("You encounter a Maze challenge!");
                            System.out.println("You have to find your way out of the maze before the time runs out.");
                            int mazeTime = 30; // Time allowed to complete the maze
                            while (mazeTime > 0) {
                                System.out.println("You have " + mazeTime + " seconds left.");
                                System.out.println("Which direction do you want to go?");
                                System.out.println("1. North");
                                System.out.println("2. East");
                                System.out.println("3. South");
                                System.out.println("4. West");

                                int direction = scanner.nextInt();

                                switch (direction) {
                                    case 1:
                                        System.out.println("You go North...");
                                        break;
                                    case 2:
                                        System.out.println("You go East...");
                                        break;
                                    case 3:
                                        System.out.println("You go South...");
                                        break;
                                    case 4:
                                        System.out.println("You go West...");
                                        break;
                                    default:
                                        System.out.println("Invalid direction!");
                                        break;
                                }

                                // Check if the player has reached the exit
                                if (Math.random() < 0.3) {
                                    System.out.println("You found the exit and earned a treasure worth 100 gold!");
                                    gearRating += 100; // Increase gear rating by 100
                                    break;
                                }

                                mazeTime--;
                            }
                            if (mazeTime == 0) {
                                System.out.println("Sorry, you ran out of time and failed the challenge.");
                            }
                        }
                        movesLeft--;
                        break;
                    case 4:
                        System.out.println("You go through the right door...");
                        int boss = (int) (Math.random() * 2); // Random boss: 0 = Dragon, 1 = Demon
                        System.out.println("You encounter the boss: ");
                        if (boss == 0) {
                            System.out.println("Dragon!");
                        } else {
                            System.out.println("Demon!");
                        }
                        int bossHealth = 100; // Initial boss health
                        while (health > 0 && bossHealth > 0) {
                            System.out.println("What do you want to do?");
                            System.out.println("1. Attack with weapon");
                            System.out.println("2. Cast magic spell");
                            System.out.println("3. Use item");
                            System.out.println("4. Attempt to flee");

                            int action = scanner.nextInt();

                            switch (action) {
                                case 1:
                                    // Attack with weapon
                                    int hitChance = (int) (Math.random() * 100); // Random hit chance
                                    if (hitChance >= 50) {
                                        int damageDealt = damage + weaponDamage - bossHealth; // Calculate damage dealt to the boss
                                        System.out.println("You hit the boss and dealt " + damageDealt + " damage!");
                                        bossHealth -= damageDealt; // Decrease boss health by the damage dealt
                                    } else {
                                        System.out.println("You missed the boss!");
                                    }
                                    break;
                                case 2:
                                    // Cast magic spell
                                    int magicChance = (int) (Math.random() * 100); // Random magic chance
                                    if (magicChance >= 50) {
                                        int damageDealt = magicDamage - bossHealth; // Calculate damage dealt to the boss
                                        System.out.println("You cast a magic spell and dealt " + damageDealt + " damage!");
                                        bossHealth -= damageDealt; // Decrease boss health by the damage dealt
                                    } else {
                                        System.out.println("Your magic spell failed!");
                                    }
                                    break;
                                case 3:
                                    // Use item
                                    System.out.println("You don't have any items!");
                                    break;
                                case 4:
                                    // Attempt to flee
                                    int fleeChance = (int) (Math.random() * 100); // Random flee chance
                                    if (fleeChance >= 50) {
                                        System.out.println("You successfully fled from the boss!");
                                        inDungeon = false; // Player leaves the dungeon
                                    } else {
                                        System.out.println("You failed to flee from the boss!");
                                    }
                                    break;
                                default:
                                    System.out.println("Invalid action!");
                                    break;
                            }

                            if (bossHealth > 0) {
                                // Boss attacks
                                int bossHitChance = (int) (Math.random() * 100); // Random hit chance for the boss
                                if (bossHitChance >= 50) {
                                    int bossDamageDealt = (int) (Math.random() * 30); // Random damage dealt by the boss
                                    System.out.println("The boss hit you and dealt " + bossDamageDealt + " damage!");
                                    health -= bossDamageDealt; // Decrease player health by the damage dealt
                                } else {
                                    System.out.println("The boss missed you!");
                                }
                            }
                        }

                        if (health <= 0) {
                            System.out.println("You have been defeated by the boss...");
                            movesLeft = 0; // Player loses the game
                        } else {
                            System.out.println("Congratulations! You have defeated the boss and found the treasure!");
                            int treasureValue = (int) (Math.random() * 500); // Random value of the treasure found
                            System.out.println("The treasure is worth " + treasureValue + " gold!");
                            gearRating += treasureValue; // Increase gear rating by the value of the treasure found
                            treasureFound = true; // Player wins the game
                        }
                        break;
                    case 5:
                        System.out.println("You peek into the doors...");
                        int peekChance = (int) (Math.random() * 100); // Random chance of finding something
                        if (peekChance >= 50) {
                            int peekValue = (int) (Math.random() * 50); // Random value of what is found
                            System.out.println("You found something worth " + peekValue + " gold!");
                            gearRating += peekValue; // Increase gear rating by the value of what is found
                        } else {
                            System.out.println("You couldn't find anything...");
                        }
                        movesLeft--;
                        break;
                    case 6:
                        System.out.println("You leave the dungeon...");
                        inDungeon = false; // Player leaves the dungeon
                        break;
                    default:
                        System.out.println("Invalid choice!");
                        break;
                }
            }
        }

        if (movesLeft == 0 && !treasureFound) {
            System.out.println("Sorry, you have run out of moves and failed to find the treasure...");
        } else {
            System.out.println("Your gear rating is " + gearRating);
            System.out.println("Congratulations! You have completed the game!");
        }

        scanner.close();
    }
}



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Python written
	

import random

class Item:
    def __init__(self, name, rarity, gear_value):
        self.name = name
        self.rarity = rarity
        self.gear_value = gear_value

class Helmet(Item):
    def __init__(self, name, rarity, gear_value):
        super().__init__(name, rarity, gear_value)

class Gloves(Item):
    def __init__(self, name, rarity, gear_value):
        super().__init__(name, rarity, gear_value)

class ChestPiece(Item):
    def __init__(self, name, rarity, gear_value):
        super().__init__(name, rarity, gear_value)

class Boots(Item):
    def __init__(self, name, rarity, gear_value, ranger_bonus=False):
        super().__init__(name, rarity, gear_value)
        self.ranger_bonus = ranger_bonus

class Bow(Item):
    def __init__(self, name, rarity, gear_value):
        super().__init__(name, rarity, gear_value)

class Sword(Item):
    def __init__(self, name, rarity, gear_value):
        super().__init__(name, rarity, gear_value)

class Ranger:
    def __init__(self):
        self.name = "Ranger"
        self.health = 100
        self.attack = 10
        self.defense = 5
        self.boots = Boots("Leather Boots", "common", 1)
        self.bow = Bow("Wooden Bow", "common", 2)

    def __str__(self):
        return f"{self.name} (Health: {self.health}, Attack: {self.attack}, Defense: {self.defense})"

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        enemy.health -= damage
        print(f"{self.name} attacks {enemy.name} for {damage} damage")

    def defend(self):
        self.defense += 1
        print(f"{self.name} defends and gains 1 defense")

class Fighter:
    def __init__(self):
        self.name = "Fighter"
        self.health = 150
        self.attack = 15
        self.defense = 10
        self.sword = Sword("Wooden Sword", "common", 2)

    def __str__(self):
        return f"{self.name} (Health: {self.health}, Attack: {self.attack}, Defense: {self.defense})"

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        enemy.health -= damage
        print(f"{self.name} attacks {enemy.name} for {damage} damage")

    def defend(self):
        self.defense += 1
        print(f"{self.name} defends and gains 1 defense")

class Enemy:
    def __init__(self):
        self.name = "Enemy"
        self.health = 50
        self.attack = 5
        self.defense = 2

    def __str__(self):
        return f"{self.name} (Health: {self.health}, Attack: {self.attack}, Defense: {self.defense})"

    def attack_player(self, player):
        damage = self.attack - player.defense
        player.health -= damage
        print(f"{self.name} attacks {player.name} for {damage} damage")

    def defend(self):
        self.defense += 1
        print(f"{self.name} defends and gains 1 defense")

class Dungeon:
    def __init__(self):
        self.ranger = Ranger()
        self.fighter = Fighter()
        self.enemy = Enemy()
        self.items = [Helmet("Iron Helmet", "common", 1),
                      Helmet("Steel Helmet", "common", 2),
                      Helmet("Diamond Helmet", "green", 3),
                      Helmet("Dragon Helmet", "blue", 4),
                      Helmet("Godly Helmet", "purple", 5),
                      Helmet("Golden Helmet", "gold", 6),
                      Gloves("Leather Gloves", "common", 1),
                      Gloves("Iron Gauntlets", "common", 2),
                      Gloves("Steel Gauntlets", "green", 3),
                      Gloves("Dragon Gauntlets", "blue", 4),
                      Gloves("Godly Gauntlets", "purple", 5),
                      Gloves("Golden Gauntlets", "gold", 6),
                      ChestPiece("Leather Armor", "common", 2),
                      ChestPiece("Iron Armor", "common", 4),
                      ChestPiece("Steel Armor", "green", 6),
                      ChestPiece("Dragon Armor", "blue", 8),
                      ChestPiece("Godly Armor", "purple", 10),
                      ChestPiece("Golden Armor", "gold", 12),
                      Boots("Leather Boots", "common", 1),
                      Boots("Iron Boots", "common", 2),
                      Boots("Steel Boots", "green", 3),
                      Boots("Dragon Boots", "blue", 4, True),
                      Boots("Godly Boots", "purple", 5),
                      Boots("Golden Boots", "gold", 6),
                      Bow("Wooden Bow", "common", 2),
                      Bow("Iron Bow", "common", 4),
                      Bow("Steel Bow", "green", 6),
                      Bow("Dragon Bow", "blue", 8),
                      Bow("Godly Bow", "purple", 10),
                      Bow("Golden Bow", "gold", 12),
                      Sword("Wooden Sword", "common", 2),
                      Sword("Iron Sword", "common", 4),
                      Sword("Steel Sword", "green", 6),
                      Sword("Dragon Sword", "blue", 8),
                      Sword("Godly Sword", "purple", 10),
                      Sword("Golden Sword", "gold", 12)]

    def start(self):
        print("You are in a dark dungeon. You see an enemy in front of you.")
        print(self.ranger)
        print(self.fighter)
        print(self.enemy)

        while self.ranger.health > 0 and self.fighter.health > 0 and self.enemy.health > 0:
            print("What do you want to do?")
            print("1. Attack enemy")
            print("2. Defend")
            print("3. Run")

            choice = input("Enter your choice: ")

            if choice == "1":
                self.ranger.attack_enemy(self.enemy)
                self.fighter.attack_enemy(self.enemy)
            elif choice == "2":
                self.ranger.defend()
                self.fighter.defend()
            elif choice == "3":
                print("You run away from the enemy.")
                return

            if self.enemy.health <= 0:
                print("You defeated the enemy!")
                loot = random.choice(self.items)
                if isinstance(loot, Boots) and loot.ranger_bonus:
                    print(f"You found {loot.name} ({loot.rarity}) with gear value {loot.gear_value + 1} (Ranger bonus)")
                    if loot.gear_value + 1 > self.ranger.boots.gear_value:
                        self.ranger.boots = loot
                elif isinstance(loot, Bow):
                    print(f"You found {loot.name} ({loot.rarity}) with gear value {loot.gear_value}")
                    if loot.gear_value > self.ranger.bow.gear_value:
                        self.ranger.bow = loot
                elif isinstance(loot, Sword):
                    print(f"You found {loot.name} ({loot.rarity}) with gear value {loot.gear_value}")
                    if loot.gear_value > self.fighter.sword.gear_value:
                        self.fighter.sword = loot
                else:
                    print(f"You found {loot.name} ({loot.rarity}) with gear value {loot.gear_value}")
                return

            self.enemy.attack_player(self.ranger)
            self.enemy.attack_player(self.fighter)

        if self.ranger.health <= 0 and self.fighter.health <= 0:
            print("You both died. Game over.")
        elif self.ranger.health <= 0:
            print("The Ranger died. Game over.")
        else:
            print("The Fighter died. Game over.")

dungeon = Dungeon()
dungeon.start()


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Written in java


java


import java.util.Random;

public class Dungeon {
    private Ranger ranger;
    private Fighter
    private Enemy enemy;
    private Item[] items;

    public Dungeon() {
        ranger = new Ranger();
        fighter = new Fighter();
        enemy = new Enemy();
        items = new Item[] {
            new Helmet("Iron Helmet", "common", 1),
            new Helmet("Steel Helmet", "common", 2),
            new Helmet("Diamond Helmet", "green", 3),
            new Helmet("Dragon Helmet", "blue", 4),
            new Helmet("Godly Helmet", "purple", 5),
            new Helmet("Golden Helmet", "gold", 6),
            new Gloves("Leather Gloves", "common", 1),
            new Gloves("Iron Gauntlets", "common", 2),
            new Gloves("Steel Gauntlets", "green", 3),
            new Gloves("Dragon Gauntlets", "blue", 4),
            new Gloves("Godly Gauntlets", "purple", 5),
            new Gloves("Golden Gauntlets", "gold", 6),
            new ChestPiece("Leather Armor", "common", 2),
            new ChestPiece("Iron Armor", "common", 4),
            new ChestPiece("Steel Armor", "green", 6),
            new ChestPiece("Dragon Armor", "blue", 8),
            new ChestPiece("Godly Armor", "purple", 10),
            new ChestPiece("Golden Armor", "gold", 12),
            new Boots("Leather Boots", "common", 1),
            new Boots("Iron Boots", "common", 2),
            new Boots("Steel Boots", "green", 3),
            new Boots("Dragon Boots", "blue", 4, true),
            new Boots("Godly Boots", "purple", 5),
            new Boots("Golden Boots", "gold", 6),
            new Bow("Wooden Bow", "common", 2),
            new Bow("Iron Bow", "common", 4),
            new Bow("Steel Bow", "green", 6),
            new Bow("Dragon Bow", "blue", 8),
            new Bow("Godly Bow", "purple", 10),
            new Bow("Golden Bow", "gold", 12),
            new Sword("Wooden Sword", "common", 2),
            new Sword("Iron Sword", "common", 4),
            new Sword("Steel Sword", "green", 6),
            new Sword("Dragon Sword", "blue", 8),
            new Sword("Godly Sword", "purple", 10),
            new Sword("Golden Sword", "gold", 12)
        };
    }

    public void start() {
        System.out.println("You are in a dark dungeon. You see an enemy in front of you.");
        System.out.println(ranger);
        System.out.println(fighter);
        System.out.println(enemy);

        Random random = new Random();

        while (ranger.getHealth() > 0 && fighter.getHealth() > 0 && enemy.getHealth() > 0) {
            System.out.println("What do you want to do?");
            System.out.println("1. Attack enemy");
            System.out.println("2. Defend");
            System.out.println("3. Run");

            int choice = Integer.parseInt(System.console().readLine());

            if (choice == 1) {
                ranger.attackEnemy(enemy);
                fighter.attackEnemy(enemy);
            } else if (choice == 2) {
                ranger.defend();
                fighter.defend();
            } else if (choice == 3) {
                System.out.println("You run away from the enemy.");
                return;
            }

            if (enemy.getHealth() <= 0) {
                System.out.println("You defeated the enemy!");
                Item loot = items[random.nextInt(items.length)];
                if (loot instanceof Boots && ((Boots) loot).isRangerBonus()) {
                    System.out.printf("You found %s (%s) with gear value %d (Ranger bonus)%n", 
                        loot.getName(), loot.getRarity(), ((Boots) loot).getGearValue() + 1);
                    if (((Boots) loot).getGearValue() + 1 > ranger.getBoots().getGearValue()) {
                        ranger.setBoots((Boots) loot);
                    }
                } else if (loot instanceof Bow) {
                    System.out.printf("You found %s (%s) with gear value %d%n", 
                        loot.getName(), loot.getRarity(), ((Bow) loot).getGearValue());
                    if (((Bow) loot).getGearValue() > ranger.getBow().getGearValue()) {
                        ranger.setBow((Bow) loot);
                    }
                } else if (loot instanceof Sword) {
                    System.out.printf("You found %s (%s) with gear value %d%n", 
                        loot.getName(), loot.getRarity(), ((Sword) loot).getGearValue());
                    if (((Sword) loot).getGearValue() > fighter.getSword().getGearValue()) {
                        fighter.setSword((Sword) loot);
                    }
                } else {
                    System.out.printf("You found %s (%s) with gear value %d%n", 
                        loot.getName(), loot.getRarity(), loot.getGearValue());
                }
                return;
            }

            enemy.attackPlayer(ranger);
            enemy.attackPlayer(fighter);
        }

        if (ranger.getHealth() <= 0 && fighter.getHealth() <= 0) {
            System.out.println("You both died. Game over.");
        } else if (ranger.getHealth() <= 0) {
            System.out.println("The Ranger died. Game over.");
        } else {
            System.out.println("The Fighter died. Game over.");
        }
    }

    public static void main(String[] args) {
        Dungeon dungeon = new Dungeon();
        dungeon.start();
    }
}

abstract class Item {
    private String name;
    private String rarity;
    private int gearValue;

    public Item(String name, String rarity, int gearValue) {
        this.name = name;
        this.rarity = rarity;
        this.gearValue = gearValue;
    }

    public String getName() {
        return name;
    }

    public String getRarity() {
        return rarity;
    }

    public int getGearValue() {
        return gearValue;
    }
}

class Helmet extends Item {
    public Helmet(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Gloves extends Item {
    public Gloves(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class ChestPiece extends Item {
    public ChestPiece(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Boots extends Item {
    private boolean rangerBonus;

    public Boots(String name, String rarity, int gearValue, boolean rangerBonus) {
        super(name, rarity, gearValue);
        this.rangerBonus = rangerBonus;
    }

    public boolean isRangerBonus() {
        return rangerBonus;
    }
}

class Bow extends Item {
    public Bow(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Sword extends Item {
    public Sword(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Ranger {
    private String name;
    private int health;
    private int attack;
    private int defense;
    private Boots boots;
    private Bow bow;

    public Ranger() {
        name = "Ranger";
        health = 100;
        attack = 10;
        defense = 5;
        boots = new Boots("Leather Boots", "common", 1, false);
        bow = new Bow("Wooden Bow", "common", 2);
    }

    public int getHealth() {
        return health;
    }

    public Boots getBoots() {
        return boots;
    }

    public Bow getBow() {
        return bow;
    }

    public void setBoots(Boots boots) {
        this.boots = boots;
    }

    public void setBow(Bow bow) {
        this.bow = bow;
    }

    public void attackEnemy(Enemy enemy) {
        int damage = attack - enemy.getDefense();
        enemy.setHealth(enemy.getHealth() - damage);
        System.out.printf("%s attacks %s for %d damage%n", name, enemy.getName(), damage);
    }

    public void defend() {
        defense++;
        System.out.printf("%s defends and gains 1 defense%n", name);
    }

    public String toString() {
        return String.format("%s (Health: %d, Attack: %d, Defense: %d)", 
            name, health, attack, defense);
    }
}

class Fighter {
    private String name;
    private int health;
    private int attack;
    private int defense;
    private Sword sword;

    public Fighter() {
        name = "Fighter";
        health = 150;
        attack = 15;
        defense = 10;
        sword = new Sword("Wooden Sword", "common", 2);
    }

    public Sword getSword() {
        return sword;
    }

    public void setSword(Sword sword) {
        this.sword = sword;
    }

    public void attackEnemy(Enemy enemy) {
        int damage = attack - enemy.getDefense();
        enemy.setHealth(enemy.getHealth() - damage);
        System.out.printf("%s attacks %s for %d damage%n", name, enemy.getName(), damage);
    }

    public void defend() {
        defense++;
        System.out.printf("%s defends and gains 1 defense%n", name);
    }

    public String toString() {
        return String.format("%s (Health: %d, Attack: %d, Defense: %d)", 
            name, health, attack, defense);
    }
}

class Enemy {
    private String name;
    private int health;
    private int attack;
    private int defense;

    public Enemy() {
        name = "Goblin";
        health = 50;
        attack = 5;
        defense = 2;
    }

    public String getName() {
        return name;
    }

    public int getHealth() {
        return health;
    }

    public int getDefense() {
        return defense;
    }

    public void setHealth(int health) {
        this.health = health;
    }

    public void attackPlayer(Player player) {
        int damage = attack - player.getDefense();
        player.setHealth(player.getHealth() - damage);
        System.out.printf("%s attacks %s for %d damage%n", name, player.getName(), damage);
    }

    public String toString() {
        return String.format("%s (Health: %d, Attack: %d, Defense: %d)", 
            name, health, attack, defense);
    }
}

abstract class Player {
    protected String name;
    protected int health;
    protected int attack;
    protected int defense;

    public String getName() {
        return name;
    }

    public int getHealth() {
        return health;
    }

    public int getAttack() {
        return attack;
    }

    public int getDefense() {
        return defense;
    }

    public void setHealth(int health) {
        this.health = health;
    }

    public void defend() {
        defense++;
        System.out.printf("%s defends and gains 1 defense%n", name);
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import java.util.Random;

public class Dungeon {
    private Ranger ranger;
    private Fighter fighter;
    private Enemy enemy;
    private Item[] items;

    public Dungeon() {
        ranger = new Ranger();
        fighter = new Fighter();
        enemy = new Enemy();
        items = new Item[] {
            new Helmet("Iron Helmet", "common", 1),
            new Helmet("Steel Helmet", "common", 2),
            new Helmet("Diamond Helmet", "green", 3),
            new Helmet("Dragon Helmet", "blue", 4),
            new Helmet("Godly Helmet", "purple", 5),
            new Helmet("Golden Helmet", "gold", 6),
            new Gloves("Leather Gloves", "common", 1),
            new Gloves("Iron Gauntlets", "common", 2),
            new Gloves("Steel Gauntlets", "green", 3),
            new Gloves("Dragon Gauntlets", "blue", 4),
            new Gloves("Godly Gauntlets", "purple", 5),
            new Gloves("Golden Gauntlets", "gold", 6),
            new ChestPiece("Leather Armor", "common", 2),
            new ChestPiece("Iron Armor", "common", 4),
            new ChestPiece("Steel Armor", "green", 6),
            new ChestPiece("Dragon Armor", "blue", 8),
            new ChestPiece("Godly Armor", "purple", 10),
            new ChestPiece("Golden Armor", "gold", 12),
            new Boots("Leather Boots", "common", 1, false),
            new Boots("Iron Boots", "common", 2, false),
            new Boots("Steel Boots", "green", 3, false),
            new Boots("Dragon Boots", "blue", 4, true),
            new Boots("Godly Boots", "purple", 5, false),
            new Boots("Golden Boots", "gold", 6, false),
            new Bow("Wooden Bow", "common", 2),
            new Bow("Iron Bow", "common", 4),
            new Bow("Steel Bow", "green", 6),
            new Bow("Dragon Bow", "blue", 8),
            new Bow("Godly Bow", "purple", 10),
            new Bow("Golden Bow", "gold", 12),
            new Sword("Wooden Sword", "common", 2),
            new Sword("Iron Sword", "common", 4),
            new Sword("Steel Sword", "green", 6),
            new Sword("Dragon Sword", "blue", 8),
            new Sword("Godly Sword", "purple", 10),
            new Sword("Golden Sword", "gold", 12)
        };
    }

    public void start() {
        System.out.println("You are in a dark dungeon. You see an enemy in front of you.");
        System.out.println(ranger);
        System.out.println(fighter);
        System.out.println(enemy);

        Random random = new Random();

        while (ranger.getHealth() > 0 && fighter.getHealth() > 0 && enemy.getHealth() > 0) {
            System.out.println("What do you want to do?");
            System.out.println("1. Attack enemy");
            System.out.println("2. Defend");
            System.out.println("3. Run");

            int choice = Integer.parseInt(System.console().readLine());

            if (choice == 1) {
                ranger.attackEnemy(enemy);
                fighter.attackEnemy(enemy);
            } else if (choice == 2) {
                ranger.defend();
                fighter.defend();
            } else if (choice == 3) {
                System.out.println("You run away from the enemy.");
                return;
            }

            if (enemy.getHealth() <= 0) {
                System.out.println("You defeated the enemy!");
                Item loot = items[random.nextInt(items.length)];
                if (loot instanceof Boots && ((Boots) loot).isRangerBonus()) {
                    System.out.printf("You found %s (%s) with gear value %d (Ranger bonus)%n", 
                        loot.getName(), loot.getRarity(), ((Boots) loot).getGearValue() + 1);
                    if (((Boots) loot).getGearValue() + 1 > ranger.getBoots().getGearValue()) {
                        ranger.setBoots((Boots) loot);
                    }
                } else if (loot instanceof Bow) {
                    System.out.printf("You found %s (%s) with gear value %d%n", 
                        loot.getName(), loot.getRarity(), ((Bow) loot).getGearValue());
                    if (((Bow) loot).getGearValue() > ranger.getBow().getGearValue()) {
                        ranger.setBow((Bow) loot);
                    }
                } else if (loot instanceof Sword) {
                    System.out.printf("You found %s (%s) with gear value %d%n", 
                        loot.getName(), loot.getRarity(), ((Sword) loot).getGearValue());
                    if (((Sword) loot).getGearValue() > fighter.getSword().getGearValue()) {
                        fighter.setSword((Sword) loot);
                    }
                } else {
                    System.out.printf("You found %s (%s) with gear value %d%n", 
                        loot.getName(), loot.getRarity(), loot.getGearValue());
                }
                return;
            }

            enemy.attackPlayer(ranger);
            enemy.attackPlayer(fighter);
        }

        if (ranger.getHealth() <= 0 && fighter.getHealth() <= 0) {
            System.out.println("You both died. Game over.");
        } else if (ranger.getHealth() <= 0) {
            System.out.println("The Ranger died. Game over.");
        } else {
            System.out.println("The Fighter died. Game over.");
        }
    }

    public static void main(String[] args) {
        Dungeon dungeon = new Dungeon();
        dungeon.start();
    }
}

abstract class Item {
    private String name;
    private String rarity;
    private int gearValue;

    public Item(String name, String rarity, int gearValue) {
        this.name = name;
        this.rarity = rarity;
        this.gearValue = gearValue;
    }

    public String getName() {
        return name;
    }

    public String getRarity() {
        return rarity;
    }

    public int getGearValue() {
        return gearValue;
    }
}

class Helmet extends Item {
    public Helmet(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Gloves extends Item {
    public Gloves(String name, String rarity, int gearValue) {
        super(name,rarity, gearValue);
    }
}

class Gloves extends Item {
    public Gloves(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class ChestPiece extends Item {
    public ChestPiece(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Boots extends Item {
    private boolean rangerBonus;

    public Boots(String name, String rarity, int gearValue, boolean rangerBonus) {
        super(name, rarity, gearValue);
        this.rangerBonus = rangerBonus;
    }

    public boolean isRangerBonus() {
        return rangerBonus;
    }
}

class Bow extends Item {
    public Bow(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Sword extends Item {
    public Sword(String name, String rarity, int gearValue) {
        super(name, rarity, gearValue);
    }
}

class Ranger {
    private String name;
    private int health;
    private int attack;
    private int defense;
    private Boots boots;
    private Bow bow;

    public Ranger() {
        name = "Ranger";
        health = 100;
        attack = 10;
        defense = 5;
        boots = new Boots("Leather Boots", "common", 1, false);
        bow = new Bow("Wooden Bow", "common", 2);
    }

    public int getHealth() {
        return health;
    }

    public Boots getBoots() {
        return boots;
    }

    public Bow getBow() {
        return bow;
    }

    public void setBoots(Boots boots) {
        this.boots = boots;
    }

    public void setBow(Bow bow) {
        this.bow = bow;
    }

    public void attackEnemy(Enemy enemy) {
        int damage = attack - enemy.getDefense();
        enemy.setHealth(enemy.getHealth() - damage);
        System.out.printf("%s attacks %s for %d damage%n", name, enemy.getName(), damage);
    }

    public void defend() {
        defense++;
        System.out.printf("%s defends and gains 1 defense%n", name);
    }

    public String toString() {
        return String.format("%s (Health: %d, Attack: %d, Defense: %d)", 
            name, health, attack, defense);
    }
}

class Fighter {
    private String name;
    private int health;
    private int attack;
    private int defense;
    private Sword sword;

    public Fighter() {
        name = "Fighter";
        health = 150;
        attack = 15;
        defense = 10;
        sword = new Sword("Wooden Sword", "common", 2);
    }

    public Sword getSword() {
        return sword;
    }

    public void setSword(Sword sword) {
        this.sword = sword;
    }

    public void attackEnemy(Enemy enemy) {
        int damage = attack - enemy.getDefense();
        enemy.setHealth(enemy.getHealth() - damage);
        System.out.printf("%s attacks %s for %d damage%n", name, enemy.getName(), damage);
    }

    public void defend() {
        defense++;
        System.out.printf("%s defends and gains 1 defense%n", name);
    }

    public String toString() {
        return String.format("%s (Health: %d, Attack: %d, Defense: %d)", 
            name, health, attack, defense);
    }
}

class Enemy {
    private String name;
    private int health;
    private int attack;
    private int defense;

    public Enemy() {
        name = "Goblin";
        health = 50;
        attack = 5;
        defense = 2;
    }

    public String getName() {
        return name;
    }

    public int getHealth() {
        return health;
    }

    public int getDefense() {
        return defense;
    }

    public void setHealth(int health) {
        this.health = health;
    }

    public void attackPlayer(Player player) {
        int damage = attack - player.getDefense();
        player.setHealth(player.getHealth() - damage);
        System.out.printf("%s attacks %s for %d damage%n", name, player.getName(), damage);
    }

    public String toString() {
        return String.format("%s (Health: %d, Attack: %d, Defense: %d)", 
            name, health, attack, defense);
    }
}

abstract class Player {
    protected String name;
    protected int health;
    protected int attack;
    protected int defense;

    public String getName() {
        return name;
    }

    public int getHealth() {
        return health;
    }

    public int getAttack() {
        return attack;
    }

    public int getDefense() {
        return defense;
    }

    public void setHealth(int health) {
        this.health = health;
    }

    public void defend() {
        defense++;
        System.out.printf("%s defends and gains 1 defense%n", name);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.Random;
import java.util.Scanner;

public class Dungeon {
    private Ranger ranger;
    private Fighter fighter;
    private Enemy enemy;
    private Item[] items;

    public Dungeon() {
        ranger = new Ranger();
        fighter = new Fighter();
        enemy = new Enemy();
        items = new Item[] {
            new Helmet("Iron Helmet", "common", 1),
            new Helmet("Steel Helmet", "common", 2),
            new Helmet("Diamond Helmet", "green", 3),
            new Helmet("Dragon Helmet", "blue", 4),
            new Helmet("Godly Helmet", "purple", 5),
            new Helmet("Golden Helmet", "gold", 6),
            new Boots("Leather Boots", "common", 1, false),
            new Boots("Iron Boots", "common", 2, false),
            new Boots("Steel Boots", "green", 3, false),
            new Boots("Dragon Boots", "blue", 4, true),
            new Boots("Godly Boots", "purple", 5, false),
            new Boots("Golden Boots", "gold", 6, false),
            new ChestPiece("Leather Armor", "common", 2),
            new ChestPiece("Iron Armor", "common", 4),
            new ChestPiece("Steel Armor", "green", 6),
            new ChestPiece("Dragon Armor", "blue", 8),
            new ChestPiece("Godly Armor", "purple", 10),
            new ChestPiece("Golden Armor", "gold", 12),
            new Bow("Wooden Bow", "common", 2),
            new Bow("Iron Bow", "common", 4),
            new Bow("Steel Bow", "green", 6),
            new Bow("Dragon Bow", "blue", 8),
            new Bow("Godly Bow", "purple", 10),
            new Bow("Golden Bow", "gold", 12),
            new Sword("Wooden Sword", "common", 2),
            new Sword("Iron Sword", "common", 4),
            new Sword("Steel Sword", "green", 6),
            new Sword("Dragon Sword", "blue", 8),
            new Sword("Godly Sword", "purple", 10),
            new Sword("Golden Sword", "gold", 12)
        };
    }

    public void play() {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        int enemyLevel = random.nextInt(10) + 1;
        enemy.setLevel(enemyLevel);
        System.out.println("You have entered the dungeon.");
        System.out.println("You have encountered an enemy of level " + enemyLevel);
        while (ranger.getHealth() > 0 && fighter.getHealth() > 0 && enemy.getHealth() > 0) {
            System.out.println("Choose your action:");
            System.out.println("1. Attack");
            System.out.println("2. Use Item");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    ranger.attack(enemy);
                    fighter.attack(enemy);
                    enemy.attack(ranger);
                    enemy.attack(fighter);
                    break;
                case 2:
                    System.out.println("Choose an item to use:");
                    for (int i = 0; i < items.length; i++) {
                        System.out.println((i + 1) + ". " + items[i].getName());
                    }
                    int itemChoice = scanner.nextInt();
                    items[itemChoice - 1].use(ranger);
                    items[itemChoice - 1].use(fighter);
                    break;
                default:
                    System.out.println("Invalid choice.");
                    break;
            }
            System.out.println("Enemy health: " + enemy.getHealth());
            System.out.println("Ranger health: " + ranger.getHealth());
            System.out.println("Fighter health: " + fighter.getHealth());
        }
        if (ranger.getHealth() <= 0 && fighter.getHealth() <= 0) {
            System.out.println("You have been defeated.");
        } else if (enemy.getHealth() <= 0) {
            System.out.println("You have defeated the enemy!");
        }
    }
}

class Ranger {
    private int health;
    private int damage;

    public Ranger() {
        health = 100;
        damage = 10;
    }

    public void attack(Enemy enemy) {
        enemy.takeDamage(damage);
    }

    public void takeDamage(int damage) {
        health -= damage;
    }

    public int getHealth() {
        return health;
    }
}

class Fighter {
    private int health;
    private int damage;

    public Fighter() {
        health = 150;
        damage = 15;
    }

    public void attack(Enemy enemy) {
        enemy.takeDamage(damage);
    }

    public void takeDamage(int damage) {
        health -= damage;
    }

    public int getHealth() {
        return health;
    }
}

class Enemy {
    private int health;
    private int damage;
    private int level;

    public Enemy() {
        health = 100;
        damage = 10;
        level = 1;
    }

    public void attack(Ranger ranger) {
        ranger.takeDamage(damage);
    }

    public void attack(Fighter fighter) {
        fighter.takeDamage(damage);
    }

    public void takeDamage(int damage) {
        health -= damage;
    }

    public int getHealth() {
        return health;
    }

    public void setLevel(int level) {
        this.level = level;
        health += level * 10;
        damage += level;
    }
}

abstract class Item {
    private String name;
    private String rarity;

    public Item(String name, String rarity) {
        this.name = name;
        this.rarity = rarity;
    }

    public String getName() {
        return name;
    }

    public String getRarity() {
        return rarity;
    }

    public abstract void use(Ranger ranger);

    public abstract void use(Fighter fighter);
}

class Helmet extends Item {
    private int defense;

    public Helmet(String name, String rarity, int defense) {
        super(name, rarity);
        this.defense = defense;
    }

    public void use(Ranger ranger) {
        ranger.setDefense(ranger.getDefense() + defense);
    }

    public void use(Fighter fighter) {
        fighter.setDefense(fighter.getDefense() + defense);
    }
}

class Boots extends Item {
    private int speed;
    private boolean canFly;

    public Boots(String name, String rarity, int speed, boolean canFly) {
        super(name, rarity);
        this.speed = speed;
        this.canFly = canFly;
    }

    public void use(Ranger ranger) {
        ranger.setSpeed(ranger.getSpeed() + speed);
        ranger.setCanFly(ranger.canFly() || canFly);
    }

    public void use(Fighter fighter) {
        fighter.setSpeed(fighter.getSpeed() + speed);
    }
}

class ChestPiece extends Item {
    private int defense;

    public ChestPiece(String name, String rarity, int defense) {
        super(name, rarity);
        this.defense = defense;
    }

    public void use(Ranger ranger) {
        ranger.setDefense(ranger.getDefense() + defense);
    }

    public void use(Fighter fighter) {
        fighter.setDefense(fighter.getDefense() + defense);
    }
}

class Bow extends Item {
    private int damage;

    public Bow(String name, String rarity, int damage) {
        super(name, rarity);
        this.damage = damage;
    }

    public void use(Ranger ranger) {
        ranger.setDamage(ranger.getDamage() + damage);
    }

    public void use(Fighter fighter) {
        System.out.println("Only rangers can use bows.");
    }
}

class Sword extends Item {
    private int damage;

    public Sword(String name, String rarity, int damage) {
        super(name, rarity);
        this.damage = damage;
    }

    public void use(Ranger ranger) {
        System.out.println("Only fighters can use swords.");
    }

    public void use(Fighter fighter) {
        fighter.setDamage(fighter.getDamage() + damage);
    }
}


